declare module sdkbox {     module AdColonyAdInfo {    }     module PluginAdColony {        /**        * initialize the plugin instance.        */        export function init() : object;
        /**        * play video ad using provided name that was specified in sdkbox_config.json        */        export function show(name : string) : object;
        /**        * Set listener to listen for adcolony events        */        export function setListener(listener : object) : object;
        /**        * Get the listener        */        export function getListener() : object;
        /**        * Remove the listener, and can't listen to events anymore        */        export function removeListener() : object;
        /**        * Returns the zone status for the specified zone.        *        * @deprecated please use getStatus(name) instead        */        export function zoneStatusForZone(zoneID : string) : number;
        /**        * Check the availability of the adcolony ads by name        */        export function getStatus(name : string) : number;
        /**        * Assigns your own custom identifier to the current app user.        *        * Once you've provided an identifier, AdColony will persist it across app        * restarts (stored on disk only) until you update it. If using this method,        * call it before `+ configureWithAppID:zoneIDs:delegate:logging:` so that the        * identifier is used consistently across all server communications. The        * identifier will also pass through to server-side V4VC callbacks.        * @param customID An arbitrary, application-specific identifier string for the current user. Must be less than 128 characters.        * @see getCustomID        */        export function setCustomID(customID : string) : object;
        /**        * Returns the device's current custom identifier.        *        * @return The custom identifier string most recently set using `+ setCustomID:`.        * @see setCustomID:        */        export function getCustomID() : string;
        /**        * Returns an AdColony-defined device identifier.        *        * This identifier should remain constant across the lifetime of an iOS device.        * The identifier is a SHA-1 hash of the lowercase colon-separated MAC address of the device's WiFi interface.        * We do not recommend using this        * identifier for new integrations. This method is provided for backwards compatibility.        * @return The string representation of the device's AdColony identifier.        */        export function getUniqueDeviceID() : string;
        /**        * Returns the device's advertising identifier.        *        * This value can change if the user restores their device or resets ad tracking.        * @return The string representation of the device's advertising identifier, introduced in iOS 6. Returns `nil` on iOS 5 or below.        * @note this function only available on ios        */        export function getAdvertisingIdentifier() : string;
        /**        * Returns the device's vendor identifier.        *        * @return As of version 2.3 of our iOS SDK, AdColony no longer collects the vendor identifier and this method will return `nil`. This method is provided for backwards compatibility.        * @note this function only available on ios        */        export function getVendorIdentifier() : string;
        /**        * Returns the number of ads that the user must play to earn the designated reward.        *        * @note this function only available on ios        */        export function getVideosPerReward(currencyName : string) : number;
        /**        * Returns the number of ads that the user has seen towards their next reward.        *        * @note this function only available on ios        */        export function getVideoCreditBalance(currencyName : string) : number;
        /**        * Cancels any full-screen ad that is currently playing and returns control to the app.        *        * No earnings or V4VC rewards will occur if an ad is canceled programmatically by the app.        * This should only be used by apps that must immediately respond to non-standard incoming events,        * like a VoIP phone call. This should not be used for standard app interruptions such as        * multitasking or regular phone calls.        */        export function cancelAd() : object;
        /**        * Whether a full-screen AdColony ad is currently being played.        *        * @return A boolean indicating if AdColony is currently playing an ad.        * @note this function only available on ios        */        export function videoAdCurrentlyRunning() : boolean;
        /**        * This method permanently turns off all AdColony ads for this app on the current device.        *        * After this method is called, no ads will be played unless the app is deleted and reinstalled.        * This method could be used in the implementation of an In-App Purchase to disable ads;        * make sure to allow In-App Purchases to be restored by the user in the case of deleting and reinstalling the app.        * @note this function only available on ios        */        export function turnAllAdsOff() : object;
        /**        * Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.        *        * Providing non personally-identifiable information using this API will improve targeting and unlock        * improved earnings for your app. [This support article](http://support.adcolony.com/customer/portal/articles/700183-sdk-user-metadata-pass-through) contains usage guidelines.        * @param metadataType One of the predefined user metadata keys.        * @param value Either a predefined user metadata value, or arbitrary value.        * @note this function only available on ios        */        export function setUserMetadata(metadataType : string , value : string) : object;
        /**        * Provide AdColony with real-time feedback about what a user is interested in.        *        * Providing non personally-identifiable information using this API will improve targeting and unlock        * improved earnings for your app. [This support article](http://support.adcolony.com/customer/portal/articles/700183-sdk-user-metadata-pass-through) contains usage guidelines.        * You can call this as often as you want with various topics that the user has engaged in        * within your app or as the user engages in them. For example, if the user has started browsing        * the finance section of a news app, a developer should call: `[AdColony userInterestedIn:@"finance"]`.        * @param topic An arbitrary topic string.        * @note this function only available on ios        */        export function userInterestedIn(topic : string) : object;
        /**        * Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs        * as well as those triggered by AdColonyâ€™s IAP Promo (IAPP) advertisements and will improve overall ad targeting.        *        * @param transactionID An NSString representing the unique SKPaymentTransaction identifier for the IAP. Must be 128 chars or less.        * @param productID An NSString identifying the purchased product. Must be 128 chars or less.        * @param quantity An int indicating the number of items.        * @param price (*optional*) An NSNumber indicating the total price of the items purchased.        * @param currencyCode (*optional*) An NSString indicating the real-world, three-letter ISO 4217 (e.g. USD) currency code of the transaction.        * @see onAdColonyIAPRequest:quantity        */        export function notifyIAPComplete(transactionID : string , productID : string , quantity : number , price : number , currencyCode : string) : object;
        /**        * Request all ads        */        export function requestAllAds() : object;
    }     module AdColonyListener {        /*!        * called when AdColony is finished loading.        */        export function onAdColonyChange(info : object , available : boolean) : object;
        /*!        * reward was received.        */        export function onAdColonyReward(info : object , currencyName : string , amount : number , success : boolean) : object;
        /*!        * showing an ad has started.        */        export function onAdColonyStarted(info : object) : object;
        /*!        * showing an ad has finished.        */        export function onAdColonyFinished(info : object) : object;
    }}